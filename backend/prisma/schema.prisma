// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Estudante {
  id             Int      @id @default(autoincrement())
  nomeCompleto   String   @db.VarChar(255)
  naturalidade   String   @db.VarChar(255)
  idade          Int
  dataNascimento DateTime
  escola         String   @db.VarChar(255)
  serie          String   @db.VarChar(255)
  turno          Turno
  createAt       DateTime @default(now())
  updatedAt      DateTime @updatedAt

  responsavel           Responsavel?
  endereco              Endereco?
  informacoesAdicionais InformacoesAdicionais?
}

model Responsavel {
  id              Int       @id @default(autoincrement())
  nomeResponsavel String    @db.VarChar(255)
  numeroContato   String    @db.VarChar(255)
  rg              String    @db.VarChar(255)
  cpf             String    @db.VarChar(255)
  email           String    @db.VarChar(255)
  createAt        DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  estudante       Estudante @relation(fields: [estudanteId], references: [id])
  estudanteId     Int       @unique
}

model Endereco {
  id          Int        @id @default(autoincrement())
  cep         String     @db.Char(9)
  rua         String
  bairro      String
  cidade      String
  createAt    DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  estudante   Estudante? @relation(fields: [estudanteId], references: [id])
  estudanteId Int        @unique
}

model InformacoesAdicionais {
  id          Int        @id @default(autoincrement())
  oficina     Oficina
  horario     Turno
  moradia     Moradia
  auxilio     Boolean
  transporte  Boolean
  moradores   String
  divulgacao  Boolean
  createAt    DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  estudante   Estudante? @relation(fields: [estudanteId], references: [id])
  estudanteId Int        @unique
}

// ENUMS
enum Turno {
  matutino
  vespertino
}

enum Oficina {
  artes
  violao
  jiujitsu
  nivel1
  nivel2
  nivel3
}

enum Moradia {
  propria
  alugada
  cedida
}
